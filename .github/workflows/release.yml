name: Release

on:
  push:
    tags:
      - "*"

permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      CXX: clang++-14
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cmake -B build && cmake --build build
      - name: Test
        run: ctest --output-on-failure --test-dir build
  release:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: ${{ needs.build-and-test.result == 'success' }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ASSETS: |
        [
          {
            "path": "./singleheader",
            "name": "ada.cpp",
            "content_type": "text/plain"
          },
          {
            "path": "./singleheader",
            "name": "ada.h",
            "content_type": "text/plain"
          },
          {
            "path": "./",
            "name": "ada_source_code.zip",
            "content_type": "application/zip"
          },
          {
            "path": "./",
            "name": "ada_source_code.tar.gz",
            "content_type": "application/gzip"
          },
        ]
        
    steps:
      - uses: actions/checkout@v3
      - name: Generate compressed Assets
        run: | 
          tar -czvf ada_source_code.tar.gz .
          zip -r ada_source_code.zip . -x "*.tar.gz"

      - name: Amalgamation
        run: cd singleheader && ./amalgamate.py

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Assets
        id: upload-release-assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ item.path }}
          asset_name: ${{ item.name }}
          asset_content_type: ${{ item.content_type }}
        loop: ${{ fromJson(env.ASSETS) }}